from aiogram import types, F, Router
from aiogram.types import (
    BufferedInputFile,
    InputMediaPhoto,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.enums import ParseMode
from bot.utils.add_watermark import add_watermark
from bot.storage import (
    album_buffer,
    album_timers,          # —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∞
    post_cache,
    user_watermarks,
    user_messages,
    bot_messages,
    user_channels,
    preview_messages,      # —Å—é–¥–∞ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º id –ø—Ä–µ–≤—å—é, —á—Ç–æ–±—ã –∏—Ö –Ω–µ —É–¥–∞–ª—è—Ç—å
)
import asyncio

router = Router()
DEBOUNCE_SEC = 1.6  # –ø–∞—É–∑–∞ —Ç–∏—à–∏–Ω—ã, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–ª—å–±–æ–º

async def _finalize_album(bot, user_id: int, media_group_id: str, wm_text: str):
    """–§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä —Ñ–æ—Ç–æ –¥–∞–Ω–Ω–æ–≥–æ media_group_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –∏ –∫–Ω–æ–ø–∫–∏."""
    album = album_buffer.pop(media_group_id, None)
    if not album:
        return

    messages = album["messages"]
    status_msg_id = album.get("status_msg_id")

    # —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å ¬´–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–ª—å–±–æ–º‚Ä¶¬ª
    if status_msg_id:
        try:
            await bot.delete_message(chat_id=user_id, message_id=status_msg_id)
        except:
            pass

    # ===== –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –†–û–í–ù–û 1 –∫–∞–¥—Ä ‚Äî —Å—á–∏—Ç–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–º =====
    if len(messages) == 1:
        m = messages[0]
        f = await bot.get_file(m.photo[-1].file_id)
        fb = await bot.download_file(f.file_path)
        wm = add_watermark(fb.read(), wm_text)

        input_photo = BufferedInputFile(wm.read(), "photo.jpg")
        caption = m.caption or ""
        caption_entities = m.caption_entities

        media = [InputMediaPhoto(media=input_photo)]
        post_cache[user_id] = {
            "media": media,
            "caption": caption,
            "caption_entities": caption_entities,
            "is_album": False
        }

        # –ø—Ä–µ–≤—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (entities ‚Üí parse_mode=None; –∏–Ω–∞—á–µ ‚Üí HTML)
        if caption_entities:
            prev = await bot.send_photo(user_id, photo=input_photo,
                                        caption=caption, caption_entities=caption_entities,
                                        parse_mode=None)
        else:
            prev = await bot.send_photo(user_id, photo=input_photo,
                                        caption=caption, parse_mode=ParseMode.HTML)
        bot_messages[user_id].append(prev.message_id)
        preview_messages[user_id].append(prev.message_id)

        # –∫–Ω–æ–ø–∫–∏
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="post_confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="post_cancel")]
        ])
        ask = await bot.send_message(user_id, "–ì–æ—Ç–æ–≤–æ. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª?", reply_markup=markup)
        bot_messages[user_id].append(ask.message_id)
        return

    # ===== –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∞–ª—å–±–æ–º (>=2) =====
    # –ø–æ–¥–ø–∏—Å—å/—ç–Ω—Ç–∏—Ç–∏ –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ –æ–Ω–∏ –µ—Å—Ç—å
    caption = next((msg.caption for msg in messages if msg.caption), "") or ""
    caption_entities = next((msg.caption_entities for msg in messages if msg.caption_entities), None)

    media = []
    for i, msg in enumerate(messages):
        f = await bot.get_file(msg.photo[-1].file_id)
        fb = await bot.download_file(f.file_path)
        wm = add_watermark(fb.read(), wm_text)
        input_file = BufferedInputFile(wm.read(), f"album_{i}.jpg")

        if i == 0:
            if caption_entities:
                media.append(InputMediaPhoto(
                    media=input_file,
                    caption=caption,
                    caption_entities=caption_entities,
                    parse_mode=None  # –í–ê–ñ–ù–û: –ø—Ä–∏ entities parse_mode –ù–ï —Å—Ç–∞–≤–∏–º
                ))
            else:
                media.append(InputMediaPhoto(
                    media=input_file,
                    caption=caption,
                    parse_mode=ParseMode.HTML
                ))
        else:
            media.append(InputMediaPhoto(media=input_file))

    post_cache[user_id] = {
        "media": media,
        "caption": caption,
        "caption_entities": caption_entities,
        "is_album": True
    }

    # –ø—Ä–µ–≤—å—é –∞–ª—å–±–æ–º–∞
    preview = await bot.send_media_group(chat_id=user_id, media=media)
    ids = [m.message_id for m in preview]
    bot_messages[user_id].extend(ids)
    preview_messages[user_id].extend(ids)

    # –∫–Ω–æ–ø–∫–∏
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="post_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="post_cancel")]
    ])
    ask = await bot.send_message(user_id, "–ì–æ—Ç–æ–≤–æ. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª?", reply_markup=markup)
    bot_messages[user_id].append(ask.message_id)


@router.message(F.photo)
async def handle_photos(message: types.Message):
    user_id = message.from_user.id
    media_group_id = message.media_group_id

    # —Ç—Ä–∏–≥–≥–µ—Ä–∏–º –¥–µ—Ñ–æ–ª—Ç—ã
    _ = user_channels[user_id]
    wm_text = user_watermarks[user_id]

    user_messages.setdefault(user_id, []).append(message.message_id)
    bot_messages.setdefault(user_id, [])
    preview_messages.setdefault(user_id, [])

    # ====== —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞ (—Å –¥–µ–±–∞—É–Ω—Å–æ–º) ======
    if media_group_id:
        album = album_buffer.setdefault(media_group_id, {
            "messages": [],
            "shown": False,
            "status_msg_id": None
        })
        album["messages"].append(message)

        if not album["shown"]:
            album["shown"] = True
            status = await message.answer("üïì –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–ª—å–±–æ–º‚Ä¶")
            bot_messages[user_id].append(status.message_id)
            album["status_msg_id"] = status.message_id

        # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–±–∞—É–Ω—Å-—Ç–∞–π–º–µ—Ä –Ω–∞ DEBOUNCE_SEC —Ç–∏—à–∏–Ω—ã
        old_task = album_timers.get(media_group_id)
        if old_task and not old_task.done():
            old_task.cancel()

        async def _debounce():
            try:
                await asyncio.sleep(DEBOUNCE_SEC)
            except asyncio.CancelledError:
                return
            await _finalize_album(message.bot, user_id, media_group_id, wm_text)

        album_timers[media_group_id] = asyncio.create_task(_debounce())
        return

    # ====== –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ ======
    status_msg = await message.answer("üïì –î–æ–±–∞–≤–ª—è—é –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫‚Ä¶")
    bot_messages[user_id].append(status_msg.message_id)

    f = await message.bot.get_file(message.photo[-1].file_id)
    fb = await message.bot.download_file(f.file_path)
    result = add_watermark(fb.read(), wm_text)

    caption = message.caption or ""
    caption_entities = message.caption_entities
    input_photo = BufferedInputFile(result.read(), "photo.jpg")

    media = [InputMediaPhoto(media=input_photo)]
    post_cache[user_id] = {
        "media": media,
        "caption": caption,
        "caption_entities": caption_entities,
        "is_album": False
    }

    if caption_entities:
        prev = await message.bot.send_photo(
            user_id, photo=input_photo, caption=caption,
            caption_entities=caption_entities, parse_mode=None
        )
    else:
        prev = await message.bot.send_photo(
            user_id, photo=input_photo, caption=caption, parse_mode=ParseMode.HTML
        )
    bot_messages[user_id].append(prev.message_id)
    preview_messages[user_id].append(prev.message_id)

    ask = await message.bot.send_message(
        user_id,
        "–ì–æ—Ç–æ–≤–æ. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="post_confirm")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="post_cancel")]
        ])
    )
    bot_messages[user_id].append(ask.message_id)

    try:
        await status_msg.delete()
    except:
        pass
