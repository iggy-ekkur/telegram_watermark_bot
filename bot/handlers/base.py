from aiogram import types, F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    CallbackQuery
)

from bot.storage import (
    user_messages, bot_messages,
    user_channels, user_watermarks,
    last_menu_message
)
from bot.states import SetWatermark, SetChannel
from bot.keyboards.settings import get_settings_menu  # inline-–º–µ–Ω—é

router = Router()

@router.message(CommandStart())
async def start(message: types.Message):
    uid = message.from_user.id

    # ‚¨áÔ∏è –¢–†–ò–ì–ì–ï–†–ò–ú –î–ï–§–û–õ–¢–´ —á–µ—Ä–µ–∑ defaultdict (–≤–∞–∂–Ω–æ ‚Äî –Ω–µ .get)
    _ = user_channels[uid]      # "@testplaygroundwatermark"
    _ = user_watermarks[uid]    # "FLP STONE"

    warning = (
        "‚ö†Ô∏è *–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —É–±–µ–¥–∏—Ç–µ—Å—å:*\n\n"
        "1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª\n"
        "2. –£ –Ω–µ–≥–æ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "3. –í—ã —Ç–æ–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø–æ—Å—Ç üëá"
    )
    msg = await message.answer(
        warning,
        parse_mode="Markdown",  # –æ–∫, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ Markdown; –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –¥–µ—Ä–∂–∏–º HTML
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
            resize_keyboard=True,
            is_persistent=True,      # —á—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–ª–∞ —Å–∞–º–∞ –ø–æ —Å–µ–±–µ
            one_time_keyboard=False
        )
    )
    user_messages[uid].append(message.message_id)
    bot_messages[uid].append(msg.message_id)


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def open_settings(message: types.Message):
    uid = message.from_user.id
    user_messages[uid].append(message.message_id)

    # –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–∏–º —Ç—Ä–∏–≥–≥–µ—Ä-—Å–æ–æ–±—â–µ–Ω–∏–µ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å—Ç–∏–º —á–∞—Ç)
    try:
        await message.bot.delete_message(chat_id=uid, message_id=message.message_id)
    except:
        pass

    # –µ—Å–ª–∏ —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –µ—â—ë –≤–∏—Å–∏—Ç ‚Äî —É–¥–∞–ª–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –º–µ–Ω—é
    old_menu_id = last_menu_message[uid]
    if old_menu_id:
        try:
            await message.bot.delete_message(chat_id=uid, message_id=old_menu_id)
        except:
            pass

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
    menu_msg = await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_settings_menu())
    last_menu_message[uid] = menu_msg.message_id
    bot_messages[uid].append(menu_msg.message_id)


@router.callback_query(F.data == "hide_menu")
async def hide_menu(callback: CallbackQuery):
    uid = callback.from_user.id
    try:
        await callback.message.delete()
    except:
        pass
    # –º–µ–Ω—é —Å–∫—Ä—ã—Ç–æ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º id; reply-–∫–ª–∞–≤–∞ –æ—Å—Ç–∞—ë—Ç—Å—è persistent
    last_menu_message[uid] = None


@router.callback_query(F.data == "set_channel")
async def ask_channel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üì° –í–≤–µ–¥–∏ @–∫–∞–Ω–∞–ª, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã:",
                                     reply_markup=get_settings_menu())
    await state.set_state(SetChannel.waiting_for_channel)


@router.message(SetChannel.waiting_for_channel)
async def save_channel(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    if not message.text:
        return await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.")
    channel = message.text.strip()
    try:
        bot_member = await message.bot.get_chat_member(channel, (await message.bot.me()).id)
        if bot_member.status not in ["administrator", "creator"]:
            return await message.reply("‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞.")
        user_member = await message.bot.get_chat_member(channel, uid)
        if user_member.status not in ["administrator", "creator"]:
            return await message.reply("‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")

        user_channels[uid] = channel
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {channel} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        await state.clear()
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data == "setmark_text")
async def ask_watermark(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:",
                                     reply_markup=get_settings_menu())
    await state.set_state(SetWatermark.text)


@router.message(SetWatermark.text)
async def save_watermark(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    if not message.text:
        return await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.")
    txt = message.text.strip()
    user_watermarks[uid] = txt
    await message.answer(f"‚úÖ –í–æ—Ç–µ—Ä–º–∞—Ä–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {txt}")
    await state.clear()


@router.callback_query(F.data == "info")
async def show_info(callback: CallbackQuery):
    uid = callback.from_user.id
    channel = user_channels[uid]
    watermark = user_watermarks[uid]
    await callback.message.edit_text(
        f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\nüì° –ö–∞–Ω–∞–ª: {channel}\nüíß –í–æ—Ç–µ—Ä–º–∞—Ä–∫: {watermark}",
        reply_markup=get_settings_menu()
    )
