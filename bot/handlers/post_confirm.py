from aiogram import F, Router
from aiogram.types import CallbackQuery
from aiogram.enums import ParseMode
from aiogram.types import InputMediaPhoto, InputMediaVideo

from bot.utils.is_admin import check_admin_permissions
from bot.storage import (
    post_cache,
    user_channels,
    user_messages,
    bot_messages,
    protected_messages,
    preview_messages,
    publishing_in_progress,   # —Ñ–ª–∞–≥ –∑–∞—â–∏—Ç—ã –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
)

router = Router()

async def cleanup_bot_messages(bot, user_id: int, keep_ids: set[int] | None = None):
    """
    –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (–ø—Ä–µ–≤—å—é –Ω–µ —Ç—Ä–æ–≥–∞–µ–º),
    –Ω–µ —Ç—Ä–æ–≥–∞–µ–º:
      - protected_messages[user_id]
      - preview_messages[user_id]
      - keep_ids (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—É—â–µ–µ callback.message)
    """
    prot = set(protected_messages.get(user_id, set()))
    prev = set(preview_messages.get(user_id, []))
    keep = set(keep_ids or set())
    skip = prot | prev | keep

    for msg_id in bot_messages.get(user_id, []):
        if msg_id in skip:
            continue
        try:
            await bot.delete_message(chat_id=user_id, message_id=msg_id)
        except:
            pass
    bot_messages.get(user_id, []).clear()


@router.callback_query(F.data == "post_confirm")
async def confirm_post(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –∞–Ω—Ç–∏-–¥–∞–±–ª–∫–ª–∏–∫
    if publishing_in_progress[user_id]:
        await callback.answer("‚è≥ –£–∂–µ –ø—É–±–ª–∏–∫—É—é‚Ä¶")
        return
    publishing_in_progress[user_id] = True

    await callback.answer("üì§ –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç...")

    post_data = post_cache.get(user_id)
    if not post_data:
        publishing_in_progress[user_id] = False
        await callback.message.answer("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.")
        return

    channel_id = user_channels[user_id]
    ok, error_msg = await check_admin_permissions(callback.bot, channel_id, user_id)
    if not ok:
        publishing_in_progress[user_id] = False
        await callback.message.answer(error_msg)
        return

    caption: str = post_data.get("caption", "") or ""
    caption_entities = post_data.get("caption_entities")
    media = post_data["media"]
    is_album: bool = post_data.get("is_album", False)

    try:
        # ===== –ü—É–±–ª–∏–∫–∞—Ü–∏—è =====
        if is_album:
            if media:
                first = media[0]
                if isinstance(first, (InputMediaPhoto, InputMediaVideo)):
                    if caption_entities:
                        first.caption = caption
                        first.caption_entities = caption_entities
                        first.parse_mode = None
                    else:
                        first.caption = caption or None
                        first.parse_mode = ParseMode.HTML
                # –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                for m in media[1:]:
                    m.caption = None
                    m.caption_entities = None
                    m.parse_mode = None

            await callback.bot.send_media_group(chat_id=channel_id, media=media)

        else:
            if caption_entities:
                await callback.bot.send_photo(
                    chat_id=channel_id,
                    photo=media[0].media,
                    caption=caption,
                    caption_entities=caption_entities,
                    parse_mode=None
                )
            else:
                await callback.bot.send_photo(
                    chat_id=channel_id,
                    photo=media[0].media,
                    caption=caption,
                    parse_mode=ParseMode.HTML,
                )

        # ===== –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ =====
        try:
            await callback.message.edit_text(
                f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ <code>{channel_id}</code>",
                parse_mode=ParseMode.HTML,
            )
        except Exception:
            pass

        # ===== –ü–æ—Ç–æ–º —á–∏—Å—Ç–∏–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º –ø—Ä–µ–≤—å—é/—Ç–µ–∫—É—â–µ–µ) =====
        await cleanup_bot_messages(callback.bot, user_id, keep_ids={callback.message.message_id})

        # –ß–∏—Å—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for msg_id in user_messages.get(user_id, []):
            try:
                await callback.bot.delete_message(chat_id=user_id, message_id=msg_id)
            except:
                pass
        user_messages.get(user_id, []).clear()

        # –ö—ç—à –ø–æ—Å—Ç–∞ –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å, –ø—Ä–µ–≤—å—é –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —á–∞—Ç–µ
        post_cache.pop(user_id, None)

    except Exception as e:
        await callback.bot.send_message(chat_id=user_id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    finally:
        publishing_in_progress[user_id] = False


@router.callback_query(F.data == "post_cancel")
async def cancel_post(callback: CallbackQuery):
    user_id = callback.from_user.id

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception:
        try:
            await callback.message.answer("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception:
            pass

    # —á–∏—Å—Ç–∏–º —Å–ª—É–∂–µ–±–Ω—ã–µ (–±–µ–∑ –ø—Ä–µ–≤—å—é –∏ –±–µ–∑ —Ç–µ–∫—É—â–µ–≥–æ)
    await cleanup_bot_messages(callback.bot, user_id, keep_ids={callback.message.message_id})

    # —á–∏—Å—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—ç—à
    user_messages.get(user_id, []).clear()
    post_cache.pop(user_id, None)
